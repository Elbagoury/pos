import logging

from odoo import api, fields, models
from odoo import tools, _
from odoo.exceptions import ValidationError
from odoo.modules.module import get_module_resource

from datetime import datetime, date, time, timedelta

import base64
import sys
import os

import StringIO
import base64
from xlwt import *
from __builtin__ import True
from email import _name

try:
    import cStringIO as StringIO
    import xlwt
except:
    raise osv.except_osv('Warning !','python-xlwt module missing. Please install it.')


class DailyPlanningSchedule(models.Model):
	_name = "daily.planning.schedule"
	
	concrete_planning_ids = fields.One2many("concrete.planning","daily_plan_id", "Concrete Schedule")
	actual_planning_ids = fields.One2many("actual.planning","daily_plan_id", "Actual Concrete Schedule")
	manufacturing_ids = fields.One2many("mrp.production","daily_plan_id", "Manufacturing")
	name = fields.Date("Date")
	shift_count = fields.Integer("Shift Count")
	location_id = fields.Many2one('stock.location','Location')
	project_id = fields.Many2one('project.name', 'Project Name')
	daily_plan_state = fields.Selection([('pending', 'Pending'),('ready', 'Ready'),('progress', 'In Progress'),('done', 'Finished')], string='Status', default='pending', track_visibility='onchange')
	shiftorder_count = fields.Integer('# Shift Schedule', compute='_compute_shiftorder_count')
	shiftorder_done_count = fields.Integer('# Done Shift Schedule', compute='_compute_shiftorder_done_count')
	
	@api.model
	def create(self,values):
		values['daily_plan_state'] = 'ready'
		return super(DailyPlanningSchedule, self).create(values)
	
	@api.multi
	def button_shift_plan(self):
		concrete_plan = self.env['concrete.planning']
		actual_plan = self.env['actual.planning']
		if self.name and self.shift_count:
			for shift in range(1, self.shift_count+1):
				concrete_plan.create({
					'plan_date':self.name,
					'daily_plan_id':self.id,
					'concrete_plan_state':'progress'
				})
				
				actual_plan.create({
					'plan_date':self.name,
					'daily_plan_id':self.id,
					'concrete_plan_state':'progress'
				})
				
			self.write({'daily_plan_state':'progress'})
		
	@api.multi
	def button_manufacturing(self):
		production_id = self.env['mrp.production']
		if self.name:
			for production in range(6):
				production_id.create({
				'daily_plan_id':self.id,
				'product_id':2,
				'product_uom_id':[('category_id', '=', 1)],
				'date_planned_start':datetime.now(),
				})
	
	@api.multi
	@api.depends('concrete_planning_ids')
	def _compute_shiftorder_count(self):
		if self:
			data = self.env['concrete.planning'].read_group([('daily_plan_id', 'in', self.ids)], ['daily_plan_id'], ['daily_plan_id'])
			count_data = dict((item['daily_plan_id'][0], item['daily_plan_id_count']) for item in data)
			for shift in self:
				shift.shiftorder_count = count_data.get(shift.id, 0)
				
	@api.multi
	@api.depends('concrete_planning_ids.concrete_plan_state')
	def _compute_shiftorder_done_count(self):
		if self:
			data = self.env['concrete.planning'].read_group([('daily_plan_id', 'in', self.ids),('concrete_plan_state', '=', 'done')], ['daily_plan_id'], ['daily_plan_id'])
			count_data = dict((item['daily_plan_id'][0], item['daily_plan_id_count']) for item in data)
			for shift in self:
				shift.shiftorder_done_count = count_data.get(shift.id, 0)
			if self.shiftorder_count:
				if self.shiftorder_count == self.shiftorder_done_count:
					self.write({'daily_plan_state':'done'})

class concrete_planning(models.Model):
	_name="concrete.planning"
	
	plan_date = fields.Date('Date')
	name = fields.Many2one('shift.master','Shift')
	ring_count = fields.Integer("Ring Count")
	concrete_planning_schedule_ids = fields.One2many("concrete.planning.schedule","concrete_plan_id", "planning Schedule")		
	daily_plan_id = fields.Many2one('daily.planning.schedule', "Daily Schedule Planning", index=True, ondelete='cascade', track_visibility='onchange')
	concrete_plan_state = fields.Selection([('progress', 'In Progress'),('done', 'Finished')], string='Status',default='pending')
	file_f = fields.Binary("File", readonly=True)	
	file_name = fields.Char("File Name",size=128, readonly=True)
		
	@api.onchange('ring_count')
	def onchange_ring_count(self):
		if self.ring_count:
			count = 0
			planning_schedule_dict = []
			last_ring_id = self.env['actual.concrete.schedule'].search([('state','=','done')],order='ring_id desc', limit=1)
			if last_ring_id:
				ring_count = last_ring_id.ring_id
				for count in range(1, self.ring_count+1):
					ring_count = ring_count + 1
					planning_schedule_dict.append((0, 0, {'s_no': count, 'ring_id': ring_count,'shift':self.name}))
				final_count = count
			else:
				for count in range(1, self.ring_count+1):
					planning_schedule_dict.append((0, 0, {'s_no': count, 'ring_id': count,'shift':self.name}))
				final_count = count
			self.concrete_planning_schedule_ids = planning_schedule_dict
			
	@api.one		
	def button_done(self):
		self.write({'concrete_plan_state':'done'})
		
	@api.multi
	def concrete_schedule_report(self):
		if self:
		#if self.plan_date and self.name and self.concrete_planning_schedule_ids:
			wbk = xlwt.Workbook()
			
			borders = xlwt.Borders()
			borders.left = xlwt.Borders.THIN
			borders.right = xlwt.Borders.THIN
			borders.top = xlwt.Borders.THIN
			borders.bottom = xlwt.Borders.THIN
			
			style_header = XFStyle()
			fnt = Font()
			fnt.bold = True
			fnt.height = 12*0x14
			style_header.font = fnt
			al1 = Alignment()
			al1.horz = Alignment.HORZ_CENTER
			al1.vert = Alignment.VERT_CENTER
			pat2 = Pattern()
			style_header.alignment = al1
			style_header.pattern = pat2
			style_header.borders = borders
			
			style_header_center = XFStyle()
			fnt = Font()
			fnt.bold = True
			fnt.height = 11*0x14
			style_header_center.font = fnt
			al1 = Alignment()
			al1.horz = Alignment.HORZ_CENTER
			al1.vert = Alignment.VERT_CENTER
			pat2 = Pattern()
			style_header_center.alignment = al1
			style_header_center.pattern = pat2
			style_header_center.borders = borders
			
			style_center_align = XFStyle()
			al_c = Alignment()
			al_c.horz = Alignment.HORZ_CENTER
			al_c.vert = Alignment.VERT_CENTER
			style_center_align.alignment = al_c
			style_center_align.borders = borders
			
			sheet1 = wbk.add_sheet('Concrete Planning Schedule')
			sheet1.portrait = False
			sheet1.col(0).width = 4000
			sheet1.col(1).width = 4000
			sheet1.col(2).width = 4000
			sheet1.col(3).width = 4000
			sheet1.col(4).width = 4000
			sheet1.col(5).width = 4000
			sheet1.col(6).width = 4000
			sheet1.col(7).width = 4000
			sheet1.col(8).width = 4000
			sheet1.col(9).width = 4000
			sheet1.col(10).width = 4000
			sheet1.col(11).width = 4000
			sheet1.col(12).width = 4000
			
			row = 0
			sheet1.row(0).height = 400
			sheet1.write_merge(row, row, 0, 12, 'Concrete Planning Schedule', style_header)
			row = 1
			sheet1.row(1).height = 300
			sheet1.row(2).height = 300
			sheet1.row(3).height = 400
			sheet1.write_merge(row, row, 0, 2, 'Date', style_header)
			sheet1.write_merge(row, row, 3, 6, self.plan_date, style_center_align)
			sheet1.write_merge(row, row, 7, 9, 'Shift', style_header)
			sheet1.write_merge(row, row, 10, 12, self.name.name, style_center_align)
			row = 2
			sheet1.write_merge(row, 3, 0, 0, 'S.No', style_header_center)
			sheet1.write_merge(row, 3, 1, 1, 'Ring ID', style_header_center)
			sheet1.write_merge(row, 3, 2, 2, 'Mould ID', style_header_center)
			sheet1.write_merge(row, 3, 3, 3, 'Primary Demoulding Time', style_header_center)
			sheet1.write_merge(row, row, 4, 5, 'Cage Fixing Time', style_header_center)
			sheet1.write(3, 4, 'Start Time', style_header_center)
			sheet1.write(3, 5, 'End Time', style_header_center)
			sheet1.write_merge(row, row, 6, 7, 'Concrete', style_header_center)
			sheet1.write(3, 6, 'Start Time', style_header_center)
			sheet1.write(3, 7, 'End Time', style_header_center)
			sheet1.write_merge(row, 3, 8, 8, 'Finishing', style_header_center)
			sheet1.write_merge(row, row, 9, 10, 'Steam', style_header_center)
			sheet1.write(3, 9, 'Start Time', style_header_center)
			sheet1.write(3, 10, 'End Time', style_header_center)
			sheet1.write_merge(row, 3, 11, 11, 'Demoulding', style_header_center)
			sheet1.write_merge(row, 3, 12, 12, 'Remarks', style_header_center)
			row = 4
			for concrete_plan in self.concrete_planning_schedule_ids:
				sheet1.row(row).height = 400
				sheet1.write(row, 0, concrete_plan.s_no, style_center_align)
				sheet1.write(row, 1, concrete_plan.ring_id, style_center_align)
				sheet1.write(row, 2, str(concrete_plan.mould_id.name)+'/'+str((concrete_plan.mould_id.mould_type)).upper(), style_center_align)
				sheet1.write(row, 3, concrete_plan.primary_demoulding_time, style_center_align)
				sheet1.write(row, 4, concrete_plan.cage_fixing_start_time, style_center_align)
				sheet1.write(row, 5, concrete_plan.cage_fixing_end_time, style_center_align)
				sheet1.write(row, 6, concrete_plan.concrete_start_time, style_center_align)
				sheet1.write(row, 7, concrete_plan.concrete_end_time, style_center_align)
				sheet1.write(row, 8, concrete_plan.finishing, style_center_align)
				sheet1.write(row, 9, concrete_plan.stream_start_time, style_center_align)
				sheet1.write(row, 10, concrete_plan.stream_end_time, style_center_align)
				sheet1.write(row, 11, concrete_plan.demoudling, style_center_align)
				sheet1.write(row, 12, concrete_plan.remarks, style_center_align)
				
				row += 1
			
			"""Parsing data as string """
			file_data = StringIO.StringIO()
			o=wbk.save(file_data)
			"""string encode of data in wksheet"""
			out = base64.encodestring(file_data.getvalue())
			"""returning the output xls as binary"""
			filename = 'concrete_planning_schedule.xls'
			self.write({'file_f':out, 'file_name':filename})
			return {

                   'url': '/inma/spreadsheet_report_controller/download_document?model=concrete.planning&field=%s&id=%s&filename=%s'%(self.file_f,self.id,self.file_name),
                   'target': 'new',
                   'type': 'ir.actions.act_url',

                   }
			
						
class concrete_planning_schedule(models.Model):
	_name="concrete.planning.schedule"
	
	s_no = fields.Integer("S.No")
	ring_id = fields.Integer("Ring ID")
	mould_id = fields.Many2one("mould.master","Mould ID")
	primary_demoulding_time = fields.Float("Primary Demoulding Time")
	cage_fixing_start_time = fields.Float("Cage Fixing Start Time")
	cage_fixing_end_time = fields.Float("Cage Fixing End Time")
	concrete_start_time = fields.Float("Start Time")
	concrete_end_time = fields.Float("End Time")
	finishing = fields.Float("Finishing")
	stream_start_time = fields.Float("Start Time")
	stream_end_time = fields.Float("End Time")
	demoudling = fields.Float("Demoulding")
	remarks = fields.Text("Remarks")
	shift = fields.Many2one('shift.master','Shift')
	concrete_plan_id = fields.Many2one('concrete.planning', "Concrete Planning", ondelete='cascade')
	
	@api.onchange('cage_fixing_start_time')
	def onchange_cage_fixing_start_time(self):
		if self.cage_fixing_start_time:
			transaction_schedule = self.env['daily.planning.transaction'].search([('state','=','active')])
			if transaction_schedule:
				self.cage_fixing_end_time = self.cage_fixing_start_time + transaction_schedule.cage_fix_period
				self.concrete_start_time = self.cage_fixing_end_time + transaction_schedule.concrete_start_period
				self.concrete_end_time = self.concrete_start_time + transaction_schedule.concrete_end_period
				self.finishing = self.concrete_end_time + transaction_schedule.finish_period
				self.stream_start_time = self.finishing + transaction_schedule.steam_start_period
				self.stream_end_time = self.stream_start_time + transaction_schedule.steam_end_period
				self.demoudling = self.stream_end_time + transaction_schedule.demoulding_period
			else:
				raise ValidationError(_("Please check any one daily transaction schedule record is active state"))
				
				
class actual_planning(models.Model):
	_name="actual.planning"
	
	plan_date = fields.Date('Date')
	name = fields.Many2one('shift.master','Shift')
	ring_count = fields.Integer("Ring Count")
	daily_plan_id = fields.Many2one('daily.planning.schedule', "Daily Schedule Planning", index=True, ondelete='cascade', track_visibility='onchange')
	actual_concrete_schedule_ids = fields.One2many("actual.concrete.schedule", "actual_plan_id", "Actual Concrete Schedule")
	file_f = fields.Binary("File", readonly=True)	
	file_name = fields.Char("File Name",size=128, readonly=True)
	
	@api.onchange('name')
	def onchange_shift(self):
		if self.name:
			concrete_plan_id = self.env['concrete.planning'].search([('plan_date','=',self.plan_date),('name','=',self.name.id),('concrete_plan_state','=','done')])
			if concrete_plan_id:
				self.ring_count = concrete_plan_id.ring_count
				ring_ids = self.env['concrete.planning.schedule'].search([('concrete_plan_id','=',concrete_plan_id.id)], order='ring_id asc')
				actual_schedule_dict = []
				count = 0
				for ring in ring_ids:
					count += 1
					actual_schedule_dict.append((0, 0, {'s_no': count, 'ring_id': ring.ring_id, 'mould_id':ring.mould_id.id}))
				self.actual_concrete_schedule_ids = actual_schedule_dict
			else:
				raise ValidationError(_("First Create Concrete Planning for given shift"))
	
	@api.constrains('name')
	def constrains_shift(self):
		if self.name:
			concrete_plan_id = self.env['concrete.planning'].search([('plan_date','=',self.plan_date),('name','=',self.name.id),('concrete_plan_state','=','done')])
			if concrete_plan_id:
				return True
			else:
				raise ValidationError(_("First Create Concrete Planning for given shift"))
		
class actual_concrete_schedule(models.Model):
	_name="actual.concrete.schedule"
	
	s_no = fields.Integer("S.No")
	ring_id = fields.Integer("Ring ID")
	mould_id = fields.Many2one("mould.master","Mould ID")
	concrete_start_time = fields.Float("Start Time")
	concrete_end_time = fields.Float("End Time")
	finishing_time = fields.Float("Finishing Time")
	steam_start_time = fields.Float("Steam Start Time")
	steam_end_time = fields.Float("Steam End Time")
	demoudling = fields.Float("Demoulding")
	remarks = fields.Text("Remarks")
	state = fields.Selection([('done','Done'),('archived','Archived')])
	actual_plan_id = fields.Many2one('actual.planning', "Concrete Planning", ondelete='cascade')
	
	@api.one
	def button_done(self):
		self.write({'state':'done'})
		
	@api.one
	def button_archive(self):
		self.write({'state':'archived'})
	
class mould_master(models.Model):
	_name="mould.master"
	
	name = fields.Char("Mould")
	mould_type = fields.Selection([('l','L'),('r','R')],'Type')
	
	@api.depends('name','mould_type')
	def name_get(self):
		result = []
		for mould in self:
			name = mould.name +'/'+ (mould.mould_type).upper()
			result.append((mould.id,name))
		return result

class shift_master(models.Model):
	_name = "shift.master"
	
	name = fields.Integer('Shift No')

class mould_casting(models.Model):
	_name = "mould.casting"

	date = fields.Date('Date')
	weather = fields.Many2one("Weather","Weather")
	start_time = fields.Float("Start Time")
	close_time = fields.Float("Close Time")
	strength = fields.Integer("Strength")
	floor_incharge = fields.Many2one("hr.employee", "Floor Incharge")
	post_concrete_start_time = fields.Float("Post Concrete Start Time")
	post_concrete_close_time = fields.Float("Post Concrete Close Time")
	post_concrete_floor_incharge = fields.Many2one("hr.employee", "Post Concrete Floor Incharge")
	post_concrete_strength = fields.Integer("Post Concrete Strength")
	mould_casting_line_ids = fields.One2many('mould.casting.line','mould_casting_id','Mould Casting')
	
	@api.onchange('date')
	def onchange_date(self):
		if self.date:
			actual_plan_ids = self.env['actual.planning'].search([('plan_date','=',self.date)])
			actual_schedule = self.env['actual.concrete.schedule'].search([('actual_plan_id','in',actual_plan_ids.ids),('state','=','done')], order='ring_id asc')
			mould_casting_dict = []
			for actual in actual_schedule:
				lot_ids = self.env['stock.production.lot'].search([('name','=',actual.ring_id)])
				product_list = []
				for lot in lot_ids:
					product_list.append(lot.product_id.id)
				mould_casting_dict.append((0, 0, {'ring_id':actual.ring_id,'segment_ids':product_list, 'mould_id':actual.mould_id.id}))
			self.mould_casting_line_ids = mould_casting_dict
			
class mould_casting_line(models.Model):
	_name = "mould.casting.line"
	
	mould_casting_id = fields.Many2one('mould.casting','Mould Casting')
	ring_id = fields.Integer("Ring ID")
	mould_id = fields.Many2one("mould.master","Mould ID")
	segment_ids = fields.Many2many('product.product','mould_casting_line_product_rel','product_id','mould_casting_line_id', 'Segment')
	micro_finishing = fields.Char('Micro Finishing')
	ring_finishing = fields.Char('Ring Finishing')
	rfi_closing = fields.Char('RFI Finishing')
	
class mould_preparation(models.Model):
	_name = "mould.preparation"
	
	date = fields.Date("Date")
	start_time = fields.Float("Start Time")
	close_time = fields.Float("End Time")
	strength = fields.Integer("Strength")
	supervisor_name = fields.Many2one("hr.employee","Supervisor Name")
	mould_preparation_line_ids = fields.One2many('mould.preparation.line','mould_preparation_id','Mould Preparation Line')
	back_side_workers_ids = fields.One2many('back.side.workers','mould_preparation_id','Back Side Workers')
	file_f = fields.Binary("File", readonly=True)	
	file_name = fields.Char("File Name",size=128, readonly=True)

	@api.multi
	def print_report(self):
		if self:
			wbk = xlwt.Workbook()
			borders = xlwt.Borders()
			borders.left = xlwt.Borders.THIN
			borders.right = xlwt.Borders.THIN
			borders.top = xlwt.Borders.THIN
			borders.bottom = xlwt.Borders.THIN
			
			style_header = XFStyle()
			fnt = Font()
			fnt.bold = True
			fnt.height = 12*0x14
			style_header.font = fnt        
			al1 = Alignment()
			al1.horz = Alignment.HORZ_CENTER
			al1.vert = Alignment.VERT_CENTER
			pat2 = Pattern()
			style_header.alignment = al1
			style_header.pattern = pat2
			style_header.borders = borders
			
			style_header_left = XFStyle()
			fnt = Font()
			fnt.bold = True
			fnt.height = 11*0x14
			style_header_left.font = fnt
			style_header_left.font = fnt
			al1 = Alignment()
			al1.horz = Alignment.HORZ_LEFT
			al1.vert = Alignment.VERT_CENTER
			pat2 = Pattern()
			style_header_left.alignment = al1
			style_header_left.pattern = pat2
			style_header_left.borders = borders
			
			style_header_left1 = XFStyle()
			fnt = Font()
			fnt.bold = True
			fnt.height = 11*0x14
			style_header_left.font = fnt
			style_header_left.font = fnt
			al1 = Alignment()
			al1.horz = Alignment.HORZ_LEFT
			al1.vert = Alignment.VERT_CENTER
			pat2 = Pattern()
			style_header_left1.alignment = al1
			style_header_left1.pattern = pat2
			
			style_header_left2 = XFStyle()
			fnt = Font()
			fnt.height = 11*0x14
			style_header_left.font = fnt
			style_header_left.font = fnt
			al1 = Alignment()
			al1.horz = Alignment.HORZ_LEFT
			al1.vert = Alignment.VERT_CENTER
			pat2 = Pattern()
			style_header_left2.alignment = al1
			style_header_left2.pattern = pat2
			style_header_left2.borders = borders
			
			style_center_align = XFStyle()
			fnt1 = Font()
			fnt1.bold = True
			fnt1.height = 11*0x14
			al_c = Alignment()
			al_c.horz = Alignment.HORZ_CENTER
			al_c.vert = Alignment.VERT_CENTER
			style_center_align.font = fnt1
			style_center_align.alignment = al_c
			
			style_center_align1 = XFStyle()
			fnt1 = Font()
			fnt1.bold = True
			fnt1.height = 11*0x14
			al_c = Alignment()
			al_c.horz = Alignment.HORZ_CENTER
			al_c.vert = Alignment.VERT_CENTER
			style_center_align1.font = fnt1
			style_center_align1.alignment = al_c
			style_center_align1.borders = borders
			
			sheet1 = wbk.add_sheet('Front Side')
			sheet1.portrait = False
			
			
			
			sheet1.col(0).width = 3000
			sheet1.col(1).width = 3000
			sheet1.col(2).width = 3000
			sheet1.col(3).width = 3000
			sheet1.col(4).width = 3000
			sheet1.col(5).width = 3000
			sheet1.col(6).width = 3000
			sheet1.col(7).width = 3000
			sheet1.col(8).width = 3000
			sheet1.col(9).width = 3000
			
			sheet1.row(0).height = 400
			row = 1
			sheet1.write_merge(row, row, 0, 10, 'Mould Preparation', style_header)

			row = 2
			sheet1.write(row, 0, 'Date', style_center_align1)
			sheet1.write(row, 1, self.date, style_header_left1)	
			sheet1.write(row, 2, 'Start Time', style_center_align1)
			sheet1.write(row, 3, self.start_time, style_header_left1)	
			sheet1.write(row, 4, 'End Time', style_center_align1)
			sheet1.write(row, 5, self.close_time, style_header_left1)
			sheet1.write(row, 6, 'Strength', style_center_align1)
			sheet1.write(row, 7, self.strength, style_header_left1)
			sheet1.write_merge(row, row, 8, 10, 'Supervisor Name:  '+self.supervisor_name.name, style_header_left1)

			i = 0
			row = 3
			sheet1.write_merge(row, 4, 0, 0, 'S.No', style_center_align1)						
			sheet1.write_merge(row, 4, 1, 1, 'Ring ID', style_center_align1)		
			sheet1.write_merge(row, 4, 2, 2, 'Mould ID', style_center_align1)		
			sheet1.write_merge(row, 4, 3, 3, 'Segment', style_center_align1)		
			sheet1.write_merge(row, row, 4, 5, 'Demoulding Time of Previous ring', style_center_align1)
			sheet1.write(4, 4, 'Approved', style_center_align1)
			sheet1.write(4, 5, 'Done', style_center_align1)
			sheet1.write_merge(row, row, 6, 6, 'Cleaning & Oiling', style_center_align1)
			sheet1.write(4, 6, 'Time & Pax.', style_center_align1)
			sheet1.write_merge(row, row, 7, 7, 'Cage fixing & Inserts', style_center_align1)
			sheet1.write(4, 7, 'Time & Pax.', style_center_align1)
			sheet1.write_merge(row, row, 8, 8, 'Ready for Concreting', style_center_align1)
			sheet1.write(4, 8, 'Time', style_center_align1)
			sheet1.write_merge(row, 4, 9, 10, 'Remarks', style_center_align1)
			row = 5
			for preparation_line in self.mould_preparation_line_ids:
			        i += 1
				sheet1.write(row, 0, i, style_header_left1)			
				sheet1.write(row, 1, preparation_line.ring_id, style_header_left1)
				sheet1.write(row, 2, str(preparation_line.mould_id.name)+'/'+str((preparation_line.mould_id.mould_type)).upper(), style_header_left1)
				sheet1.write(row, 3, preparation_line.segment_id.name, style_header_left1)
				sheet1.write(row, 4, preparation_line.demoudling_time_pre_ring_approx, style_header_left1)
                                sheet1.write(row, 5, preparation_line.demoudling_time_pre_ring_done, style_header_left1)				
				sheet1.write(row, 6, preparation_line.cleaning_oil_time, style_header_left1)
				sheet1.write(row, 7, preparation_line.cage_fixing_time, style_header_left1)
				sheet1.write(row, 8, preparation_line.concreting_time, style_header_left1)
				sheet1.write_merge(row, row, 9, 10, preparation_line.remarks, style_header_left1)
				
                        sheet2 = wbk.add_sheet('Back Side')
			sheet2.portrait = False		
			
			sheet2.col(0).width = 3000
			sheet2.col(1).width = 3000
			sheet2.col(2).width = 3000
			sheet2.col(3).width = 3000
			sheet2.col(4).width = 3000
			sheet2.col(5).width = 3000
			sheet2.col(6).width = 3000
			sheet2.col(7).width = 3000
			sheet2.col(8).width = 3000
			sheet2.col(9).width = 3000
			
			sheet2.row(0).height = 400
			i = 0
			row = 1
			sheet2.write(row, 0, 'S.No', style_center_align1)
			sheet2.write(row, 1, 'Name', style_center_align1)
			sheet2.write(row, 2, 'ID', style_center_align1)
			sheet2.write(row, 3, 'Work', style_center_align1)
			sheet2.write_merge(row, row, 4, 5, 'Time', style_center_align1)	
			sheet2.write(row, 6, 'Remarks', style_center_align1)
			row = 2
                        for back_side in self.back_side_workers_ids:
			        i += 1
				sheet2.write(row, 0, i, style_header_left1)			
				sheet2.write(row, 1, back_side.employee_id.name, style_header_left1)
				sheet2.write(row, 2, back_side.id_no, style_header_left1)	
				sheet2.write(row, 3, back_side.work, style_header_left1)				
				sheet2.write(row, 4, back_side.start_time, style_header_left1)				
				sheet2.write(row, 5, back_side.end_time, style_header_left1)				
				sheet2.write(row, 6, back_side.remarks, style_header_left1)				
				
			"""Parsing data as string """
			file_data = StringIO.StringIO()
			o=wbk.save(file_data)
			"""string encode of data in wksheet"""
			out = base64.encodestring(file_data.getvalue())
			"""returning the output xls as binary"""
			filename = 'mould_preparation_report.xls'
			self.write({'file_f':out, 'file_name':filename})
			return {

                   'url': '/inma/spreadsheet_report_controller/download_document?model=mould.preparation&field=%s&id=%s&filename=%s'%(self.file_f,self.id,self.file_name),
                   'target': 'new',
                   'type': 'ir.actions.act_url',
                   }


class mould_preparation_line(models.Model):
	_name = "mould.preparation.line"
	
	ring_id = fields.Integer("Ring ID")
	mould_id = fields.Many2one("mould.master","Mould ID")
	segment_id = fields.Many2one('product.product','Segment')
	demoudling_time_pre_ring_approx = fields.Float("Previous ring time Approved")
	demoudling_time_pre_ring_done = fields.Float("Previous ring time Done")
	cleaning_oil_time = fields.Float('Cleaning oiling Time')
	cleaning_oil_pax = fields.Char('Cleaning oiling pax')
	cage_fixing_time = fields.Float('Cage fixing inserts Time')
	cage_fixing_pax = fields.Char('Cage fixing inserts Pax')
	concreting_time = fields.Float('Concreting Time')
	remarks = fields.Text('Remarks')
	mould_preparation_id = fields.Many2one('mould.preparation','Mould Preparation')
	
class back_side_workers(models.Model):
	_name = "back.side.workers"
	
	employee_id = fields.Many2one('hr.employee','Employee')
	id_no = fields.Char('ID')
	work = fields.Char('Work')
	start_time = fields.Float('Start Time')
	end_time = fields.Float('End Time')
	remarks = fields.Text('Remarks')
	mould_preparation_id = fields.Many2one('mould.preparation','Mould Preparation')
	
	@api.onchange('employee_id')
	def onchange_employee_id(self):
		if self.employee_id:
			self.id_no = self.employee_id.cid
			
class weather(models.Model):
	_name = "weather"
	
	name = fields.Char("Weather")

class special_events(models.Model):
	_name = "special.events"
	
	name = fields.Char("Special Event")
	
class daily_employee_workprogess(models.Model):
	_name = "daily.employee.workprogress"
	
	date = fields.Date("Date")
	day = fields.Char("Day")
	weather = fields.Many2one("weather","Weather")
	start = fields.Float("Start")
	lunch_break_from = fields.Float("Break Start")
	lunch_break_to = fields.Float("Break End")
	finish = fields.Float("Finish")
	special_event_ids = fields.Many2many('special.events','daily_workprogress_spl_evnt_rel','workprogress_id','special_event_id','Special Event')
	
	@api.onchange('date')
	def onchange_date(self):
		if self.date:
			week_day = datetime.strptime(self.date, "%Y-%m-%d").date().weekday()
			if week_day == 0:
				self.day = "Monday"
			elif week_day == 1:
				self.day = "Tuesday"
			elif week_day == 2:
				self.day = "Wednesday"
			elif week_day == 3:
				self.day = "Thursday"
			elif week_day == 4:
				self.day = "Friday"
			elif week_day == 5:
				self.day = "Saturday"
			else:
				self.day = "Sunday"
				
class daily_planning_transaction(models.Model):
	_name = "daily.planning.transaction"
	
	cage_fix_period = fields.Float('Cage Fix Period')
	concrete_start_period = fields.Float('Concrete Start Period')
	concrete_end_period = fields.Float('Concrete End Period')
	finish_period = fields.Float('Finishing Period')
	steam_start_period = fields.Float('Steam Start Period')
	steam_end_period = fields.Float('Steam End Period')
	demoulding_period = fields.Float('Demoulding Period')	
	state = fields.Selection([('active','Active'),('archived','Archived')], 'State', default='active')
	
	@api.model
	def create(self,vals):
		active_record = self.env['daily.planning.transaction'].search([('state','=','active')])
		if active_record:
			raise ValidationError(_("Already record is in active.Please Archive then create new record"))
		if vals.get('cage_fix_period') == 0 and vals.get('concrete_start_period') == 0 and vals.get('concrete_end_period') == 0 and vals.get('finish_period') == 0 and vals.get('steam_start_period') == 0 and vals.get('steam_end_period') == 0 and vals.get('demoulding_period') == 0:
			raise ValidationError(_("Enter hours periods in all fields"))
		return super(daily_planning_transaction, self).create(vals)
		
	@api.one
	def button_archived(self):
		self.state = 'archived'
		
class MrpProduction(models.Model):
	_inherit = "mrp.production"
	
	daily_plan_id = fields.Many2one('daily.planning.schedule', "Daily Schedule Planning", index=True, ondelete='cascade', track_visibility='onchange')
